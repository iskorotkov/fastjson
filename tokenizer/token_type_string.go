// Code generated by "stringer -type=TokenType -linecomment -output token_type_string.go"; DO NOT EDIT.

package tokenizer

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[TokenTypeNull-0]
	_ = x[TokenTypeTrue-1]
	_ = x[TokenTypeFalse-2]
	_ = x[TokenTypeLiteral-3]
	_ = x[TokenTypeQuotedLiteral-4]
	_ = x[TokenTypeObjectStart-5]
	_ = x[TokenTypeObjectEnd-6]
	_ = x[TokenTypeArrayStart-7]
	_ = x[TokenTypeArrayEnd-8]
	_ = x[TokenTypeEOF-9]
}

const _TokenType_name = "nulltruefalseliteralquoted_literal{}[]eof"

var _TokenType_index = [...]uint8{0, 4, 8, 13, 20, 34, 35, 36, 37, 38, 41}

func (i TokenType) String() string {
	if i >= TokenType(len(_TokenType_index)-1) {
		return "TokenType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _TokenType_name[_TokenType_index[i]:_TokenType_index[i+1]]
}
