// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package easyjson

import (
	json "encoding/json"

	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson6601e8cdDecodeGithubComIskorotkovFastjsonBenchmarksEasyjson(in *jlexer.Lexer, out *UserManagementResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "api_version":
			out.APIVersion = string(in.String())
		case "timestamp":
			out.Timestamp = string(in.String())
		case "request_id":
			out.RequestID = string(in.String())
		case "environment":
			out.Environment = string(in.String())
		case "region":
			out.Region = string(in.String())
		case "pagination":
			(out.Pagination).UnmarshalEasyJSON(in)
		case "metadata":
			(out.Metadata).UnmarshalEasyJSON(in)
		case "users":
			if in.IsNull() {
				in.Skip()
				out.Users = nil
			} else {
				in.Delim('[')
				if out.Users == nil {
					if !in.IsDelim(']') {
						out.Users = make([]User, 0, 0)
					} else {
						out.Users = []User{}
					}
				} else {
					out.Users = (out.Users)[:0]
				}
				for !in.IsDelim(']') {
					var v1 User
					(v1).UnmarshalEasyJSON(in)
					out.Users = append(out.Users, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "system_metrics":
			(out.SystemMetrics).UnmarshalEasyJSON(in)
		case "security_summary":
			(out.SecuritySummary).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}

func easyjson6601e8cdEncodeGithubComIskorotkovFastjsonBenchmarksEasyjson(out *jwriter.Writer, in UserManagementResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"api_version\":"
		out.RawString(prefix[1:])
		out.String(string(in.APIVersion))
	}
	{
		const prefix string = ",\"timestamp\":"
		out.RawString(prefix)
		out.String(string(in.Timestamp))
	}
	{
		const prefix string = ",\"request_id\":"
		out.RawString(prefix)
		out.String(string(in.RequestID))
	}
	{
		const prefix string = ",\"environment\":"
		out.RawString(prefix)
		out.String(string(in.Environment))
	}
	{
		const prefix string = ",\"region\":"
		out.RawString(prefix)
		out.String(string(in.Region))
	}
	{
		const prefix string = ",\"pagination\":"
		out.RawString(prefix)
		(in.Pagination).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"metadata\":"
		out.RawString(prefix)
		(in.Metadata).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"users\":"
		out.RawString(prefix)
		if in.Users == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Users {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"system_metrics\":"
		out.RawString(prefix)
		(in.SystemMetrics).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"security_summary\":"
		out.RawString(prefix)
		(in.SecuritySummary).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserManagementResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComIskorotkovFastjsonBenchmarksEasyjson(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserManagementResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComIskorotkovFastjsonBenchmarksEasyjson(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserManagementResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComIskorotkovFastjsonBenchmarksEasyjson(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserManagementResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComIskorotkovFastjsonBenchmarksEasyjson(l, v)
}

func easyjson6601e8cdDecodeGithubComIskorotkovFastjsonBenchmarksEasyjson1(in *jlexer.Lexer, out *User) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "username":
			out.Username = string(in.String())
		case "email":
			out.Email = string(in.String())
		case "first_name":
			out.FirstName = string(in.String())
		case "last_name":
			out.LastName = string(in.String())
		case "display_name":
			out.DisplayName = string(in.String())
		case "avatar_url":
			out.AvatarURL = string(in.String())
		case "status":
			out.Status = string(in.String())
		case "email_verified":
			out.EmailVerified = bool(in.Bool())
		case "phone_verified":
			out.PhoneVerified = bool(in.Bool())
		case "two_factor_enabled":
			out.TwoFactorEnabled = bool(in.Bool())
		case "created_at":
			out.CreatedAt = string(in.String())
		case "updated_at":
			out.UpdatedAt = string(in.String())
		case "last_login":
			out.LastLogin = string(in.String())
		case "login_count":
			out.LoginCount = int(in.Int())
		case "profile":
			(out.Profile).UnmarshalEasyJSON(in)
		case "permissions":
			(out.Permissions).UnmarshalEasyJSON(in)
		case "activity":
			(out.Activity).UnmarshalEasyJSON(in)
		case "preferences":
			(out.Preferences).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}

func easyjson6601e8cdEncodeGithubComIskorotkovFastjsonBenchmarksEasyjson1(out *jwriter.Writer, in User) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"username\":"
		out.RawString(prefix)
		out.String(string(in.Username))
	}
	{
		const prefix string = ",\"email\":"
		out.RawString(prefix)
		out.String(string(in.Email))
	}
	{
		const prefix string = ",\"first_name\":"
		out.RawString(prefix)
		out.String(string(in.FirstName))
	}
	{
		const prefix string = ",\"last_name\":"
		out.RawString(prefix)
		out.String(string(in.LastName))
	}
	{
		const prefix string = ",\"display_name\":"
		out.RawString(prefix)
		out.String(string(in.DisplayName))
	}
	{
		const prefix string = ",\"avatar_url\":"
		out.RawString(prefix)
		out.String(string(in.AvatarURL))
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.String(string(in.Status))
	}
	{
		const prefix string = ",\"email_verified\":"
		out.RawString(prefix)
		out.Bool(bool(in.EmailVerified))
	}
	{
		const prefix string = ",\"phone_verified\":"
		out.RawString(prefix)
		out.Bool(bool(in.PhoneVerified))
	}
	{
		const prefix string = ",\"two_factor_enabled\":"
		out.RawString(prefix)
		out.Bool(bool(in.TwoFactorEnabled))
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.String(string(in.CreatedAt))
	}
	{
		const prefix string = ",\"updated_at\":"
		out.RawString(prefix)
		out.String(string(in.UpdatedAt))
	}
	{
		const prefix string = ",\"last_login\":"
		out.RawString(prefix)
		out.String(string(in.LastLogin))
	}
	{
		const prefix string = ",\"login_count\":"
		out.RawString(prefix)
		out.Int(int(in.LoginCount))
	}
	{
		const prefix string = ",\"profile\":"
		out.RawString(prefix)
		(in.Profile).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"permissions\":"
		out.RawString(prefix)
		(in.Permissions).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"activity\":"
		out.RawString(prefix)
		(in.Activity).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"preferences\":"
		out.RawString(prefix)
		(in.Preferences).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v User) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComIskorotkovFastjsonBenchmarksEasyjson1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v User) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComIskorotkovFastjsonBenchmarksEasyjson1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *User) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComIskorotkovFastjsonBenchmarksEasyjson1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *User) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComIskorotkovFastjsonBenchmarksEasyjson1(l, v)
}

func easyjson6601e8cdDecodeGithubComIskorotkovFastjsonBenchmarksEasyjson2(in *jlexer.Lexer, out *UISettings) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "theme":
			out.Theme = string(in.String())
		case "sidebar_collapsed":
			out.SidebarCollapsed = bool(in.Bool())
		case "compact_mode":
			out.CompactMode = bool(in.Bool())
		case "animations_enabled":
			out.AnimationsEnabled = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}

func easyjson6601e8cdEncodeGithubComIskorotkovFastjsonBenchmarksEasyjson2(out *jwriter.Writer, in UISettings) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"theme\":"
		out.RawString(prefix[1:])
		out.String(string(in.Theme))
	}
	{
		const prefix string = ",\"sidebar_collapsed\":"
		out.RawString(prefix)
		out.Bool(bool(in.SidebarCollapsed))
	}
	{
		const prefix string = ",\"compact_mode\":"
		out.RawString(prefix)
		out.Bool(bool(in.CompactMode))
	}
	{
		const prefix string = ",\"animations_enabled\":"
		out.RawString(prefix)
		out.Bool(bool(in.AnimationsEnabled))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UISettings) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComIskorotkovFastjsonBenchmarksEasyjson2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UISettings) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComIskorotkovFastjsonBenchmarksEasyjson2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UISettings) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComIskorotkovFastjsonBenchmarksEasyjson2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UISettings) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComIskorotkovFastjsonBenchmarksEasyjson2(l, v)
}

func easyjson6601e8cdDecodeGithubComIskorotkovFastjsonBenchmarksEasyjson3(in *jlexer.Lexer, out *SystemMetrics) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "active_users_last_24h":
			out.ActiveUsersLast24h = int(in.Int())
		case "total_logins_today":
			out.TotalLoginsToday = int(in.Int())
		case "failed_login_attempts":
			out.FailedLoginAttempts = int(in.Int())
		case "password_resets_requested":
			out.PasswordResetsRequested = int(in.Int())
		case "new_user_registrations":
			out.NewUserRegistrations = int(in.Int())
		case "average_session_duration_minutes":
			out.AverageSessionDurationMinutes = int(in.Int())
		case "feature_adoption_rates":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.FeatureAdoptionRates = make(map[string]float64)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v4 float64
					v4 = float64(in.Float64())
					(out.FeatureAdoptionRates)[key] = v4
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}

func easyjson6601e8cdEncodeGithubComIskorotkovFastjsonBenchmarksEasyjson3(out *jwriter.Writer, in SystemMetrics) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"active_users_last_24h\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ActiveUsersLast24h))
	}
	{
		const prefix string = ",\"total_logins_today\":"
		out.RawString(prefix)
		out.Int(int(in.TotalLoginsToday))
	}
	{
		const prefix string = ",\"failed_login_attempts\":"
		out.RawString(prefix)
		out.Int(int(in.FailedLoginAttempts))
	}
	{
		const prefix string = ",\"password_resets_requested\":"
		out.RawString(prefix)
		out.Int(int(in.PasswordResetsRequested))
	}
	{
		const prefix string = ",\"new_user_registrations\":"
		out.RawString(prefix)
		out.Int(int(in.NewUserRegistrations))
	}
	{
		const prefix string = ",\"average_session_duration_minutes\":"
		out.RawString(prefix)
		out.Int(int(in.AverageSessionDurationMinutes))
	}
	{
		const prefix string = ",\"feature_adoption_rates\":"
		out.RawString(prefix)
		if in.FeatureAdoptionRates == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v5First := true
			for v5Name, v5Value := range in.FeatureAdoptionRates {
				if v5First {
					v5First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v5Name))
				out.RawByte(':')
				out.Float64(float64(v5Value))
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SystemMetrics) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComIskorotkovFastjsonBenchmarksEasyjson3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SystemMetrics) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComIskorotkovFastjsonBenchmarksEasyjson3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SystemMetrics) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComIskorotkovFastjsonBenchmarksEasyjson3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SystemMetrics) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComIskorotkovFastjsonBenchmarksEasyjson3(l, v)
}

func easyjson6601e8cdDecodeGithubComIskorotkovFastjsonBenchmarksEasyjson4(in *jlexer.Lexer, out *SlackNotifications) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "direct_messages":
			out.DirectMessages = bool(in.Bool())
		case "team_channels":
			out.TeamChannels = bool(in.Bool())
		case "urgent_alerts":
			out.UrgentAlerts = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}

func easyjson6601e8cdEncodeGithubComIskorotkovFastjsonBenchmarksEasyjson4(out *jwriter.Writer, in SlackNotifications) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"direct_messages\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.DirectMessages))
	}
	{
		const prefix string = ",\"team_channels\":"
		out.RawString(prefix)
		out.Bool(bool(in.TeamChannels))
	}
	{
		const prefix string = ",\"urgent_alerts\":"
		out.RawString(prefix)
		out.Bool(bool(in.UrgentAlerts))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SlackNotifications) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComIskorotkovFastjsonBenchmarksEasyjson4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SlackNotifications) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComIskorotkovFastjsonBenchmarksEasyjson4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SlackNotifications) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComIskorotkovFastjsonBenchmarksEasyjson4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SlackNotifications) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComIskorotkovFastjsonBenchmarksEasyjson4(l, v)
}

func easyjson6601e8cdDecodeGithubComIskorotkovFastjsonBenchmarksEasyjson5(in *jlexer.Lexer, out *SecuritySummary) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "suspicious_activities":
			out.SuspiciousActivities = int(in.Int())
		case "blocked_ips":
			if in.IsNull() {
				in.Skip()
				out.BlockedIPs = nil
			} else {
				in.Delim('[')
				if out.BlockedIPs == nil {
					if !in.IsDelim(']') {
						out.BlockedIPs = make([]string, 0, 4)
					} else {
						out.BlockedIPs = []string{}
					}
				} else {
					out.BlockedIPs = (out.BlockedIPs)[:0]
				}
				for !in.IsDelim(']') {
					var v6 string
					v6 = string(in.String())
					out.BlockedIPs = append(out.BlockedIPs, v6)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "security_alerts":
			if in.IsNull() {
				in.Skip()
				out.SecurityAlerts = nil
			} else {
				in.Delim('[')
				if out.SecurityAlerts == nil {
					if !in.IsDelim(']') {
						out.SecurityAlerts = make([]SecurityAlert, 0, 0)
					} else {
						out.SecurityAlerts = []SecurityAlert{}
					}
				} else {
					out.SecurityAlerts = (out.SecurityAlerts)[:0]
				}
				for !in.IsDelim(']') {
					var v7 SecurityAlert
					(v7).UnmarshalEasyJSON(in)
					out.SecurityAlerts = append(out.SecurityAlerts, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "compliance_status":
			(out.ComplianceStatus).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}

func easyjson6601e8cdEncodeGithubComIskorotkovFastjsonBenchmarksEasyjson5(out *jwriter.Writer, in SecuritySummary) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"suspicious_activities\":"
		out.RawString(prefix[1:])
		out.Int(int(in.SuspiciousActivities))
	}
	{
		const prefix string = ",\"blocked_ips\":"
		out.RawString(prefix)
		if in.BlockedIPs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.BlockedIPs {
				if v8 > 0 {
					out.RawByte(',')
				}
				out.String(string(v9))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"security_alerts\":"
		out.RawString(prefix)
		if in.SecurityAlerts == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v10, v11 := range in.SecurityAlerts {
				if v10 > 0 {
					out.RawByte(',')
				}
				(v11).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"compliance_status\":"
		out.RawString(prefix)
		(in.ComplianceStatus).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SecuritySummary) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComIskorotkovFastjsonBenchmarksEasyjson5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SecuritySummary) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComIskorotkovFastjsonBenchmarksEasyjson5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SecuritySummary) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComIskorotkovFastjsonBenchmarksEasyjson5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SecuritySummary) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComIskorotkovFastjsonBenchmarksEasyjson5(l, v)
}

func easyjson6601e8cdDecodeGithubComIskorotkovFastjsonBenchmarksEasyjson6(in *jlexer.Lexer, out *SecurityAlert) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "type":
			out.Type = string(in.String())
		case "user_id":
			out.UserID = string(in.String())
		case "timestamp":
			out.Timestamp = string(in.String())
		case "severity":
			out.Severity = string(in.String())
		case "resolved":
			out.Resolved = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}

func easyjson6601e8cdEncodeGithubComIskorotkovFastjsonBenchmarksEasyjson6(out *jwriter.Writer, in SecurityAlert) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix)
		out.String(string(in.UserID))
	}
	{
		const prefix string = ",\"timestamp\":"
		out.RawString(prefix)
		out.String(string(in.Timestamp))
	}
	{
		const prefix string = ",\"severity\":"
		out.RawString(prefix)
		out.String(string(in.Severity))
	}
	{
		const prefix string = ",\"resolved\":"
		out.RawString(prefix)
		out.Bool(bool(in.Resolved))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SecurityAlert) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComIskorotkovFastjsonBenchmarksEasyjson6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SecurityAlert) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComIskorotkovFastjsonBenchmarksEasyjson6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SecurityAlert) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComIskorotkovFastjsonBenchmarksEasyjson6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SecurityAlert) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComIskorotkovFastjsonBenchmarksEasyjson6(l, v)
}

func easyjson6601e8cdDecodeGithubComIskorotkovFastjsonBenchmarksEasyjson7(in *jlexer.Lexer, out *RecentAction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "action":
			out.Action = string(in.String())
		case "resource":
			out.Resource = string(in.String())
		case "timestamp":
			out.Timestamp = string(in.String())
		case "ip_address":
			out.IPAddress = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}

func easyjson6601e8cdEncodeGithubComIskorotkovFastjsonBenchmarksEasyjson7(out *jwriter.Writer, in RecentAction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"action\":"
		out.RawString(prefix[1:])
		out.String(string(in.Action))
	}
	{
		const prefix string = ",\"resource\":"
		out.RawString(prefix)
		out.String(string(in.Resource))
	}
	{
		const prefix string = ",\"timestamp\":"
		out.RawString(prefix)
		out.String(string(in.Timestamp))
	}
	{
		const prefix string = ",\"ip_address\":"
		out.RawString(prefix)
		out.String(string(in.IPAddress))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RecentAction) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComIskorotkovFastjsonBenchmarksEasyjson7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RecentAction) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComIskorotkovFastjsonBenchmarksEasyjson7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RecentAction) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComIskorotkovFastjsonBenchmarksEasyjson7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RecentAction) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComIskorotkovFastjsonBenchmarksEasyjson7(l, v)
}

func easyjson6601e8cdDecodeGithubComIskorotkovFastjsonBenchmarksEasyjson8(in *jlexer.Lexer, out *QuietHours) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "enabled":
			out.Enabled = bool(in.Bool())
		case "start":
			out.Start = string(in.String())
		case "end":
			out.End = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}

func easyjson6601e8cdEncodeGithubComIskorotkovFastjsonBenchmarksEasyjson8(out *jwriter.Writer, in QuietHours) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"enabled\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.Enabled))
	}
	{
		const prefix string = ",\"start\":"
		out.RawString(prefix)
		out.String(string(in.Start))
	}
	{
		const prefix string = ",\"end\":"
		out.RawString(prefix)
		out.String(string(in.End))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v QuietHours) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComIskorotkovFastjsonBenchmarksEasyjson8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v QuietHours) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComIskorotkovFastjsonBenchmarksEasyjson8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *QuietHours) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComIskorotkovFastjsonBenchmarksEasyjson8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *QuietHours) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComIskorotkovFastjsonBenchmarksEasyjson8(l, v)
}

func easyjson6601e8cdDecodeGithubComIskorotkovFastjsonBenchmarksEasyjson9(in *jlexer.Lexer, out *Profile) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "bio":
			out.Bio = string(in.String())
		case "location":
			out.Location = string(in.String())
		case "timezone":
			out.Timezone = string(in.String())
		case "language":
			out.Language = string(in.String())
		case "date_format":
			out.DateFormat = string(in.String())
		case "time_format":
			out.TimeFormat = string(in.String())
		case "company":
			out.Company = string(in.String())
		case "department":
			out.Department = string(in.String())
		case "title":
			out.Title = string(in.String())
		case "manager_id":
			out.ManagerID = string(in.String())
		case "hire_date":
			out.HireDate = string(in.String())
		case "salary_band":
			out.SalaryBand = string(in.String())
		case "employment_type":
			out.EmploymentType = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}

func easyjson6601e8cdEncodeGithubComIskorotkovFastjsonBenchmarksEasyjson9(out *jwriter.Writer, in Profile) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"bio\":"
		out.RawString(prefix[1:])
		out.String(string(in.Bio))
	}
	{
		const prefix string = ",\"location\":"
		out.RawString(prefix)
		out.String(string(in.Location))
	}
	{
		const prefix string = ",\"timezone\":"
		out.RawString(prefix)
		out.String(string(in.Timezone))
	}
	{
		const prefix string = ",\"language\":"
		out.RawString(prefix)
		out.String(string(in.Language))
	}
	{
		const prefix string = ",\"date_format\":"
		out.RawString(prefix)
		out.String(string(in.DateFormat))
	}
	{
		const prefix string = ",\"time_format\":"
		out.RawString(prefix)
		out.String(string(in.TimeFormat))
	}
	{
		const prefix string = ",\"company\":"
		out.RawString(prefix)
		out.String(string(in.Company))
	}
	{
		const prefix string = ",\"department\":"
		out.RawString(prefix)
		out.String(string(in.Department))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"manager_id\":"
		out.RawString(prefix)
		out.String(string(in.ManagerID))
	}
	{
		const prefix string = ",\"hire_date\":"
		out.RawString(prefix)
		out.String(string(in.HireDate))
	}
	{
		const prefix string = ",\"salary_band\":"
		out.RawString(prefix)
		out.String(string(in.SalaryBand))
	}
	{
		const prefix string = ",\"employment_type\":"
		out.RawString(prefix)
		out.String(string(in.EmploymentType))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Profile) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComIskorotkovFastjsonBenchmarksEasyjson9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Profile) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComIskorotkovFastjsonBenchmarksEasyjson9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Profile) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComIskorotkovFastjsonBenchmarksEasyjson9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Profile) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComIskorotkovFastjsonBenchmarksEasyjson9(l, v)
}

func easyjson6601e8cdDecodeGithubComIskorotkovFastjsonBenchmarksEasyjson10(in *jlexer.Lexer, out *Preferences) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "notifications":
			(out.Notifications).UnmarshalEasyJSON(in)
		case "ui":
			(out.UI).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}

func easyjson6601e8cdEncodeGithubComIskorotkovFastjsonBenchmarksEasyjson10(out *jwriter.Writer, in Preferences) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"notifications\":"
		out.RawString(prefix[1:])
		(in.Notifications).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"ui\":"
		out.RawString(prefix)
		(in.UI).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Preferences) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComIskorotkovFastjsonBenchmarksEasyjson10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Preferences) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComIskorotkovFastjsonBenchmarksEasyjson10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Preferences) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComIskorotkovFastjsonBenchmarksEasyjson10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Preferences) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComIskorotkovFastjsonBenchmarksEasyjson10(l, v)
}

func easyjson6601e8cdDecodeGithubComIskorotkovFastjsonBenchmarksEasyjson11(in *jlexer.Lexer, out *Permissions) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "roles":
			if in.IsNull() {
				in.Skip()
				out.Roles = nil
			} else {
				in.Delim('[')
				if out.Roles == nil {
					if !in.IsDelim(']') {
						out.Roles = make([]string, 0, 4)
					} else {
						out.Roles = []string{}
					}
				} else {
					out.Roles = (out.Roles)[:0]
				}
				for !in.IsDelim(']') {
					var v12 string
					v12 = string(in.String())
					out.Roles = append(out.Roles, v12)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "groups":
			if in.IsNull() {
				in.Skip()
				out.Groups = nil
			} else {
				in.Delim('[')
				if out.Groups == nil {
					if !in.IsDelim(']') {
						out.Groups = make([]string, 0, 4)
					} else {
						out.Groups = []string{}
					}
				} else {
					out.Groups = (out.Groups)[:0]
				}
				for !in.IsDelim(']') {
					var v13 string
					v13 = string(in.String())
					out.Groups = append(out.Groups, v13)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "access_levels":
			(out.AccessLevels).UnmarshalEasyJSON(in)
		case "feature_flags":
			(out.FeatureFlags).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}

func easyjson6601e8cdEncodeGithubComIskorotkovFastjsonBenchmarksEasyjson11(out *jwriter.Writer, in Permissions) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"roles\":"
		out.RawString(prefix[1:])
		if in.Roles == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v14, v15 := range in.Roles {
				if v14 > 0 {
					out.RawByte(',')
				}
				out.String(string(v15))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"groups\":"
		out.RawString(prefix)
		if in.Groups == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v16, v17 := range in.Groups {
				if v16 > 0 {
					out.RawByte(',')
				}
				out.String(string(v17))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"access_levels\":"
		out.RawString(prefix)
		(in.AccessLevels).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"feature_flags\":"
		out.RawString(prefix)
		(in.FeatureFlags).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Permissions) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComIskorotkovFastjsonBenchmarksEasyjson11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Permissions) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComIskorotkovFastjsonBenchmarksEasyjson11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Permissions) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComIskorotkovFastjsonBenchmarksEasyjson11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Permissions) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComIskorotkovFastjsonBenchmarksEasyjson11(l, v)
}

func easyjson6601e8cdDecodeGithubComIskorotkovFastjsonBenchmarksEasyjson12(in *jlexer.Lexer, out *Pagination) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "page":
			out.Page = int(in.Int())
		case "per_page":
			out.PerPage = int(in.Int())
		case "total_pages":
			out.TotalPages = int(in.Int())
		case "total_count":
			out.TotalCount = int(in.Int())
		case "has_next":
			out.HasNext = bool(in.Bool())
		case "has_previous":
			out.HasPrevious = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}

func easyjson6601e8cdEncodeGithubComIskorotkovFastjsonBenchmarksEasyjson12(out *jwriter.Writer, in Pagination) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"page\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Page))
	}
	{
		const prefix string = ",\"per_page\":"
		out.RawString(prefix)
		out.Int(int(in.PerPage))
	}
	{
		const prefix string = ",\"total_pages\":"
		out.RawString(prefix)
		out.Int(int(in.TotalPages))
	}
	{
		const prefix string = ",\"total_count\":"
		out.RawString(prefix)
		out.Int(int(in.TotalCount))
	}
	{
		const prefix string = ",\"has_next\":"
		out.RawString(prefix)
		out.Bool(bool(in.HasNext))
	}
	{
		const prefix string = ",\"has_previous\":"
		out.RawString(prefix)
		out.Bool(bool(in.HasPrevious))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Pagination) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComIskorotkovFastjsonBenchmarksEasyjson12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Pagination) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComIskorotkovFastjsonBenchmarksEasyjson12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Pagination) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComIskorotkovFastjsonBenchmarksEasyjson12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Pagination) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComIskorotkovFastjsonBenchmarksEasyjson12(l, v)
}

func easyjson6601e8cdDecodeGithubComIskorotkovFastjsonBenchmarksEasyjson13(in *jlexer.Lexer, out *NotificationSettings) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "email":
			(out.Email).UnmarshalEasyJSON(in)
		case "slack":
			(out.Slack).UnmarshalEasyJSON(in)
		case "mobile":
			(out.Mobile).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}

func easyjson6601e8cdEncodeGithubComIskorotkovFastjsonBenchmarksEasyjson13(out *jwriter.Writer, in NotificationSettings) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"email\":"
		out.RawString(prefix[1:])
		(in.Email).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"slack\":"
		out.RawString(prefix)
		(in.Slack).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"mobile\":"
		out.RawString(prefix)
		(in.Mobile).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v NotificationSettings) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComIskorotkovFastjsonBenchmarksEasyjson13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v NotificationSettings) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComIskorotkovFastjsonBenchmarksEasyjson13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *NotificationSettings) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComIskorotkovFastjsonBenchmarksEasyjson13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *NotificationSettings) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComIskorotkovFastjsonBenchmarksEasyjson13(l, v)
}

func easyjson6601e8cdDecodeGithubComIskorotkovFastjsonBenchmarksEasyjson14(in *jlexer.Lexer, out *MobileNotifications) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "push_enabled":
			out.PushEnabled = bool(in.Bool())
		case "quiet_hours":
			(out.QuietHours).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}

func easyjson6601e8cdEncodeGithubComIskorotkovFastjsonBenchmarksEasyjson14(out *jwriter.Writer, in MobileNotifications) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"push_enabled\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.PushEnabled))
	}
	{
		const prefix string = ",\"quiet_hours\":"
		out.RawString(prefix)
		(in.QuietHours).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MobileNotifications) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComIskorotkovFastjsonBenchmarksEasyjson14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MobileNotifications) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComIskorotkovFastjsonBenchmarksEasyjson14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MobileNotifications) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComIskorotkovFastjsonBenchmarksEasyjson14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MobileNotifications) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComIskorotkovFastjsonBenchmarksEasyjson14(l, v)
}

func easyjson6601e8cdDecodeGithubComIskorotkovFastjsonBenchmarksEasyjson15(in *jlexer.Lexer, out *Metadata) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "execution_time_ms":
			out.ExecutionTimeMs = int(in.Int())
		case "cache_hit":
			out.CacheHit = bool(in.Bool())
		case "database_queries":
			out.DatabaseQueries = int(in.Int())
		case "memory_usage_mb":
			out.MemoryUsageMB = float64(in.Float64())
		case "cpu_usage_percent":
			out.CPUUsagePercent = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}

func easyjson6601e8cdEncodeGithubComIskorotkovFastjsonBenchmarksEasyjson15(out *jwriter.Writer, in Metadata) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"execution_time_ms\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ExecutionTimeMs))
	}
	{
		const prefix string = ",\"cache_hit\":"
		out.RawString(prefix)
		out.Bool(bool(in.CacheHit))
	}
	{
		const prefix string = ",\"database_queries\":"
		out.RawString(prefix)
		out.Int(int(in.DatabaseQueries))
	}
	{
		const prefix string = ",\"memory_usage_mb\":"
		out.RawString(prefix)
		out.Float64(float64(in.MemoryUsageMB))
	}
	{
		const prefix string = ",\"cpu_usage_percent\":"
		out.RawString(prefix)
		out.Float64(float64(in.CPUUsagePercent))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Metadata) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComIskorotkovFastjsonBenchmarksEasyjson15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Metadata) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComIskorotkovFastjsonBenchmarksEasyjson15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Metadata) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComIskorotkovFastjsonBenchmarksEasyjson15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Metadata) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComIskorotkovFastjsonBenchmarksEasyjson15(l, v)
}

func easyjson6601e8cdDecodeGithubComIskorotkovFastjsonBenchmarksEasyjson16(in *jlexer.Lexer, out *FeatureFlags) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "new_dashboard":
			out.NewDashboard = bool(in.Bool())
		case "experimental_ai":
			out.ExperimentalAI = bool(in.Bool())
		case "beta_mobile_app":
			out.BetaMobileApp = bool(in.Bool())
		case "advanced_analytics":
			out.AdvancedAnalytics = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}

func easyjson6601e8cdEncodeGithubComIskorotkovFastjsonBenchmarksEasyjson16(out *jwriter.Writer, in FeatureFlags) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"new_dashboard\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.NewDashboard))
	}
	{
		const prefix string = ",\"experimental_ai\":"
		out.RawString(prefix)
		out.Bool(bool(in.ExperimentalAI))
	}
	{
		const prefix string = ",\"beta_mobile_app\":"
		out.RawString(prefix)
		out.Bool(bool(in.BetaMobileApp))
	}
	{
		const prefix string = ",\"advanced_analytics\":"
		out.RawString(prefix)
		out.Bool(bool(in.AdvancedAnalytics))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FeatureFlags) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComIskorotkovFastjsonBenchmarksEasyjson16(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FeatureFlags) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComIskorotkovFastjsonBenchmarksEasyjson16(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FeatureFlags) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComIskorotkovFastjsonBenchmarksEasyjson16(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FeatureFlags) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComIskorotkovFastjsonBenchmarksEasyjson16(l, v)
}

func easyjson6601e8cdDecodeGithubComIskorotkovFastjsonBenchmarksEasyjson17(in *jlexer.Lexer, out *EmailNotifications) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "system_updates":
			out.SystemUpdates = bool(in.Bool())
		case "security_alerts":
			out.SecurityAlerts = bool(in.Bool())
		case "team_mentions":
			out.TeamMentions = bool(in.Bool())
		case "deployment_status":
			out.DeploymentStatus = bool(in.Bool())
		case "weekly_summary":
			out.WeeklySummary = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}

func easyjson6601e8cdEncodeGithubComIskorotkovFastjsonBenchmarksEasyjson17(out *jwriter.Writer, in EmailNotifications) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"system_updates\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.SystemUpdates))
	}
	{
		const prefix string = ",\"security_alerts\":"
		out.RawString(prefix)
		out.Bool(bool(in.SecurityAlerts))
	}
	{
		const prefix string = ",\"team_mentions\":"
		out.RawString(prefix)
		out.Bool(bool(in.TeamMentions))
	}
	{
		const prefix string = ",\"deployment_status\":"
		out.RawString(prefix)
		out.Bool(bool(in.DeploymentStatus))
	}
	{
		const prefix string = ",\"weekly_summary\":"
		out.RawString(prefix)
		out.Bool(bool(in.WeeklySummary))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EmailNotifications) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComIskorotkovFastjsonBenchmarksEasyjson17(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EmailNotifications) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComIskorotkovFastjsonBenchmarksEasyjson17(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EmailNotifications) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComIskorotkovFastjsonBenchmarksEasyjson17(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EmailNotifications) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComIskorotkovFastjsonBenchmarksEasyjson17(l, v)
}

func easyjson6601e8cdDecodeGithubComIskorotkovFastjsonBenchmarksEasyjson18(in *jlexer.Lexer, out *ComplianceStatus) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "gdpr_compliant":
			out.GDPRCompliant = bool(in.Bool())
		case "sox_compliant":
			out.SOXCompliant = bool(in.Bool())
		case "last_audit":
			out.LastAudit = string(in.String())
		case "next_audit":
			out.NextAudit = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}

func easyjson6601e8cdEncodeGithubComIskorotkovFastjsonBenchmarksEasyjson18(out *jwriter.Writer, in ComplianceStatus) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"gdpr_compliant\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.GDPRCompliant))
	}
	{
		const prefix string = ",\"sox_compliant\":"
		out.RawString(prefix)
		out.Bool(bool(in.SOXCompliant))
	}
	{
		const prefix string = ",\"last_audit\":"
		out.RawString(prefix)
		out.String(string(in.LastAudit))
	}
	{
		const prefix string = ",\"next_audit\":"
		out.RawString(prefix)
		out.String(string(in.NextAudit))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ComplianceStatus) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComIskorotkovFastjsonBenchmarksEasyjson18(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ComplianceStatus) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComIskorotkovFastjsonBenchmarksEasyjson18(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ComplianceStatus) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComIskorotkovFastjsonBenchmarksEasyjson18(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ComplianceStatus) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComIskorotkovFastjsonBenchmarksEasyjson18(l, v)
}

func easyjson6601e8cdDecodeGithubComIskorotkovFastjsonBenchmarksEasyjson19(in *jlexer.Lexer, out *ActivityStats) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "logins":
			out.Logins = int(in.Int())
		case "commits":
			out.Commits = int(in.Int())
		case "pull_requests":
			out.PullRequests = int(in.Int())
		case "code_reviews":
			out.CodeReviews = int(in.Int())
		case "deployments":
			out.Deployments = int(in.Int())
		case "support_tickets":
			out.SupportTickets = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}

func easyjson6601e8cdEncodeGithubComIskorotkovFastjsonBenchmarksEasyjson19(out *jwriter.Writer, in ActivityStats) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"logins\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Logins))
	}
	{
		const prefix string = ",\"commits\":"
		out.RawString(prefix)
		out.Int(int(in.Commits))
	}
	{
		const prefix string = ",\"pull_requests\":"
		out.RawString(prefix)
		out.Int(int(in.PullRequests))
	}
	{
		const prefix string = ",\"code_reviews\":"
		out.RawString(prefix)
		out.Int(int(in.CodeReviews))
	}
	{
		const prefix string = ",\"deployments\":"
		out.RawString(prefix)
		out.Int(int(in.Deployments))
	}
	{
		const prefix string = ",\"support_tickets\":"
		out.RawString(prefix)
		out.Int(int(in.SupportTickets))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ActivityStats) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComIskorotkovFastjsonBenchmarksEasyjson19(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ActivityStats) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComIskorotkovFastjsonBenchmarksEasyjson19(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ActivityStats) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComIskorotkovFastjsonBenchmarksEasyjson19(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ActivityStats) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComIskorotkovFastjsonBenchmarksEasyjson19(l, v)
}

func easyjson6601e8cdDecodeGithubComIskorotkovFastjsonBenchmarksEasyjson20(in *jlexer.Lexer, out *Activity) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "last_30_days":
			(out.Last30Days).UnmarshalEasyJSON(in)
		case "recent_actions":
			if in.IsNull() {
				in.Skip()
				out.RecentActions = nil
			} else {
				in.Delim('[')
				if out.RecentActions == nil {
					if !in.IsDelim(']') {
						out.RecentActions = make([]RecentAction, 0, 1)
					} else {
						out.RecentActions = []RecentAction{}
					}
				} else {
					out.RecentActions = (out.RecentActions)[:0]
				}
				for !in.IsDelim(']') {
					var v18 RecentAction
					(v18).UnmarshalEasyJSON(in)
					out.RecentActions = append(out.RecentActions, v18)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}

func easyjson6601e8cdEncodeGithubComIskorotkovFastjsonBenchmarksEasyjson20(out *jwriter.Writer, in Activity) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"last_30_days\":"
		out.RawString(prefix[1:])
		(in.Last30Days).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"recent_actions\":"
		out.RawString(prefix)
		if in.RecentActions == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v19, v20 := range in.RecentActions {
				if v19 > 0 {
					out.RawByte(',')
				}
				(v20).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Activity) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComIskorotkovFastjsonBenchmarksEasyjson20(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Activity) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComIskorotkovFastjsonBenchmarksEasyjson20(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Activity) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComIskorotkovFastjsonBenchmarksEasyjson20(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Activity) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComIskorotkovFastjsonBenchmarksEasyjson20(l, v)
}

func easyjson6601e8cdDecodeGithubComIskorotkovFastjsonBenchmarksEasyjson21(in *jlexer.Lexer, out *AccessLevels) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "repositories":
			if in.IsNull() {
				in.Skip()
				out.Repositories = nil
			} else {
				in.Delim('[')
				if out.Repositories == nil {
					if !in.IsDelim(']') {
						out.Repositories = make([]string, 0, 4)
					} else {
						out.Repositories = []string{}
					}
				} else {
					out.Repositories = (out.Repositories)[:0]
				}
				for !in.IsDelim(']') {
					var v21 string
					v21 = string(in.String())
					out.Repositories = append(out.Repositories, v21)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "environments":
			if in.IsNull() {
				in.Skip()
				out.Environments = nil
			} else {
				in.Delim('[')
				if out.Environments == nil {
					if !in.IsDelim(']') {
						out.Environments = make([]string, 0, 4)
					} else {
						out.Environments = []string{}
					}
				} else {
					out.Environments = (out.Environments)[:0]
				}
				for !in.IsDelim(']') {
					var v22 string
					v22 = string(in.String())
					out.Environments = append(out.Environments, v22)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "sensitive_data":
			out.SensitiveData = bool(in.Bool())
		case "admin_panel":
			out.AdminPanel = bool(in.Bool())
		case "billing":
			out.Billing = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}

func easyjson6601e8cdEncodeGithubComIskorotkovFastjsonBenchmarksEasyjson21(out *jwriter.Writer, in AccessLevels) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"repositories\":"
		out.RawString(prefix[1:])
		if in.Repositories == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v23, v24 := range in.Repositories {
				if v23 > 0 {
					out.RawByte(',')
				}
				out.String(string(v24))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"environments\":"
		out.RawString(prefix)
		if in.Environments == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v25, v26 := range in.Environments {
				if v25 > 0 {
					out.RawByte(',')
				}
				out.String(string(v26))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"sensitive_data\":"
		out.RawString(prefix)
		out.Bool(bool(in.SensitiveData))
	}
	{
		const prefix string = ",\"admin_panel\":"
		out.RawString(prefix)
		out.Bool(bool(in.AdminPanel))
	}
	{
		const prefix string = ",\"billing\":"
		out.RawString(prefix)
		out.Bool(bool(in.Billing))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AccessLevels) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComIskorotkovFastjsonBenchmarksEasyjson21(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AccessLevels) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComIskorotkovFastjsonBenchmarksEasyjson21(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AccessLevels) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComIskorotkovFastjsonBenchmarksEasyjson21(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AccessLevels) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComIskorotkovFastjsonBenchmarksEasyjson21(l, v)
}
